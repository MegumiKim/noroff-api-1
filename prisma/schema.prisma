generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int    @id @default(autoincrement())
  title       String
  author      String
  genre       String
  description String
  isbn        String @unique
  image       String
  published   String
  publisher   String
}

model OldGame {
  id          Int      @id @default(autoincrement())
  slug        String
  name        String
  description String
  released    String
  image       String
  genre       String[]
}

model NbaTeam {
  id           Int    @id @default(autoincrement())
  abbreviation String
  city         String
  conference   String
  division     String
  full_name    String
  name         String
}

model Joke {
  id        Int    @id @default(autoincrement())
  type      String
  setup     String
  punchline String
}

model CatFact {
  id   Int    @id @default(autoincrement())
  text String
}

model Quote {
  id         Int      @id @default(autoincrement())
  content    String
  author     String
  tags       String[]
  authorId   String
  authorSlug String
  length     Int
}

model Profile {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  email     String    @unique
  avatar    String?
  banner    String?
  password  String
  salt      String
  posts     Post[]
  comments  Comment[]
  followers Profile[] @relation("Follows")
  following Profile[] @relation("Follows")
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  body      String?
  author    Profile    @relation(fields: [owner], references: [name], onDelete: Cascade)
  tags      String[]
  media     String?
  owner     String
  created   DateTime
  updated   DateTime
  reactions Reaction[]
  comments  Comment[]
}

model Reaction {
  symbol String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  count  Int

  @@id([postId, symbol])
}

model Comment {
  id        Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  body      String
  author    Profile   @relation(fields: [owner], references: [name], onDelete: Cascade)
  owner     String
  created   DateTime
  replyTo   Comment?  @relation("Replies", fields: [replyToId], references: [id])
  replies   Comment[] @relation("Replies")
  replyToId Int?
}
